# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6
# üìå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞
# —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ç—Ä–µ—Ö —Ç–∞–±–ª–∏—Ü: —Ç–æ–≤–∞—Ä—ã, –∑–∞–∫–∞–∑—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏. –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä—ã –¥–æ–ª–∂–Ω–∞
# —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö, –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è—Ö –∏ —Ü–µ–Ω–∞—Ö. –¢–∞–±–ª–∏—Ü–∞
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –º–∞–≥–∞–∑–∏–Ω–∞. –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑—ã –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ
# –∑–∞–∫–∞–∑–∞—Ö, —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
# ‚óã –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: id (PRIMARY KEY),
# –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∏ –ø–∞—Ä–æ–ª—å.
# ‚óã –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: id (PRIMARY KEY),
# –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞.
# ‚óã –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: id (PRIMARY KEY), id
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (FOREIGN KEY), id —Ç–æ–≤–∞—Ä–∞ (FOREIGN KEY), –¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –∏ —Å—Ç–∞—Ç—É—Å
# –∑–∞–∫–∞–∑–∞.
# –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥–µ–ª–∏ pydantic –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏
# –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ —Ç—Ä—ë—Ö —Ç–∞–±–ª–∏—Ü
# (–∏—Ç–æ–≥–æ —à–µ—Å—Ç—å –º–æ–¥–µ–ª–µ–π).
# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑
# —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤, REST API (–∏—Ç–æ–≥–æ 15 –º–∞—Ä—à—Ä—É—Ç–æ–≤).
# ‚óã –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö
# ‚óã –ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ
# ‚óã –ó–∞–ø–∏—Å—å
# ‚óã –ò–∑–º–µ–Ω–µ–Ω–∏–µ
# ‚óã –£–¥–∞–ª–µ–Ω–∏–µ
from datetime import datetime
from typing import List
import os
import databases
import sqlalchemy
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
import ast


current_dir = os.path.dirname(os.path.abspath(__file__))
db_file = os.path.join(current_dir, "mydatabase.db")
DATABASE_URL = f"sqlite:///{db_file}"

database = databases.Database(DATABASE_URL)

metadata = sqlalchemy.MetaData()

users = sqlalchemy.Table(
    "users",
    metadata,
    sqlalchemy.Column("id", sqlalchemy.Integer, primary_key=True),
    sqlalchemy.Column("user_name", sqlalchemy.String(32)),
    sqlalchemy.Column("lastname", sqlalchemy.String(32)),
    sqlalchemy.Column("email", sqlalchemy.String(128)),
    sqlalchemy.Column("password", sqlalchemy.String(128)),

)

products = sqlalchemy.Table(
    "products",
    metadata,
    sqlalchemy.Column("id", sqlalchemy.Integer, primary_key=True),
    sqlalchemy.Column("product_name", sqlalchemy.String(32)),
    sqlalchemy.Column("description", sqlalchemy.String(1024)),
    sqlalchemy.Column("price", sqlalchemy.Integer),

)

orders = sqlalchemy.Table(
    "orders",
    metadata,
    sqlalchemy.Column("id", sqlalchemy.Integer, primary_key=True),
    sqlalchemy.Column("id_user", sqlalchemy.ForeignKey('users.id')),
    sqlalchemy.Column("id_product", sqlalchemy.ForeignKey('products.id')),
    sqlalchemy.Column("date", sqlalchemy.DateTime),
    sqlalchemy.Column("status", sqlalchemy.String(10)),
)

engine = sqlalchemy.create_engine(DATABASE_URL, connect_args={"check_same_thread": False})

metadata.create_all(engine)

app = FastAPI()

class UserIn(BaseModel): # –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–î –±–∞–∑–∞ –ø—Ä–∏—Å–≤–æ–∏—Ç —Å–∞–º–∞
    user_name: str = Field(title="Username", max_length=32)
    lastname: str = Field(title="Lastname", max_length=32)
    email: str = Field(title="Email", max_length=128)
    password: str = Field(title="Password", min_length=8)

class User(BaseModel): # –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–î –Ω–∞–º —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω
    id: int
    user_name: str = Field(title="Username", max_length=32)
    lastname: str = Field(title="Lastname", max_length=32)
    email: str = Field(title="Email", max_length=128)
    password: str = Field(title="Password", min_length=8)

class ProductIn(BaseModel):
    product_name: str = Field(title="Product_name", max_length=32)
    description: str = Field(title="Description", max_length=1024)
    price: int = Field(title="Price")

class Product(BaseModel):
    id: int
    product_name: str = Field(title="Product_name", max_length=32)
    description: str = Field(title="Description", max_length=1024)
    price: int = Field(title="Price")

class OrderIn(BaseModel):
    id_user: int
    id_product: List[int]
    date: datetime = Field(title="Date")
    status: str = Field(title="Status")

class Order(BaseModel):
    id: int
    id_user: int
    id_product: List[int]
    date: datetime = Field(title="Date")
    status: str = Field(title="Status")



@app.get("/fake_users/{count}") #–≥–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ–µ–π–∫–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def create_fake_users(count: int):
    for i in range(count):
        query = users.insert().values(user_name=f'user{i}', lastname=f'user{i}', email=f'mail{i}@mail.ru', password=f'user{i}{i}{i}{i}{i}')
        await database.execute(query)
    return {'message': f'{count} fake users create'}

@app.get("/fake_products/{count}") #–≥–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ–µ–π–∫–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
async def create_fake_products(count: int):
    for i in range(count):
        query = products.insert().values(product_name=f'product{i}', description=f'description {i}', price=f'{int(1000+i)}')
        await database.execute(query)
    return {'message': f'{count} fake users create'}

#********************USERS**********************

@app.get("/users/", response_model=List[User])
async def read_users():
    query = users.select()
    return await database.fetch_all(query)

@app.get("/users/{user_id}", response_model=User)
async def read_user(user_id: int):
    query = users.select().where(users.c.id == user_id)
    return await database.fetch_one(query)

@app.post("/users/", response_model=User)
async def create_user(user: UserIn):
    query = users.insert().values(user_name=user.user_name, lastname=user.lastname, email=user.email, password=user.password)
    last_record_id = await database.execute(query)
    return {**user.dict(), "id": last_record_id}

@app.put("/users/{user_id}", response_model=User)
async def update_user(user_id: int, new_user: UserIn):
    query = users.update().where(users.c.id == user_id).values(**new_user.dict())
    await database.execute(query)
    return {**new_user.dict(), "id": user_id}

@app.delete("/users/{user_id}")
async def delete_user(user_id: int):
    query = users.delete().where(users.c.id == user_id)
    await database.execute(query)
    return {'message': 'User deleted'}

#********************PRODUCT**********************

@app.get("/products/", response_model=List[Product])
async def read_products():
    query = products.select()
    return await database.fetch_all(query)

@app.get("/products/{products_id}", response_model=Product)
async def read_product(product_id: int):
    query = products.select().where(products.c.id == product_id)
    return await database.fetch_one(query)

@app.post("/products/", response_model=Product)
async def create_product(product: ProductIn):
    query = products.insert().values(product_name=product.product_name, description=product.description, price=product.price)
    last_record_id = await database.execute(query)
    return {**product.dict(), "id": last_record_id}

@app.put("/products/{products_id}", response_model=Product)
async def update_product(product_id: int, new_product: ProductIn):
    query = products.update().where(products.c.id == product_id).values(**new_product.dict())
    await database.execute(query)
    return {**new_product.dict(), "id": product_id}

@app.delete("/products/{products_id}")
async def delete_product(product_id: int):
    query = products.delete().where(products.c.id == product_id)
    await database.execute(query)
    return {'message': 'Product deleted'}

#********************ORDERS**********************


@app.get("/orders/", response_model=List[Order])
async def read_orders():
    query = orders.select()
    rows = await database.fetch_all(query)
    orders_list = []
    for row in rows:
        id_product = ast.literal_eval(row["id_product"])
        order = {
            "id": row["id"],
            "id_user": row["id_user"],
            "id_product": id_product,
            "date": row["date"],
            "status": row["status"],
        }
        orders_list.append(order)
    return orders_list


@app.get("/orders/{order_id}", response_model=Order)
async def get_order(order_id: int):
    query = orders.select().where(orders.c.id == order_id)
    rows = await database.fetch_all(query)
    if len(rows) == 0:
        raise HTTPException(status_code=404, detail="Order not found")
    row = rows[0]
    id_product = ast.literal_eval(row["id_product"])
    return {
        "id": row["id"],
        "id_user": row["id_user"],
        "id_product": id_product,
        "date": row["date"],
        "status": row["status"],
    }


@app.post("/orders", response_model=Order)
async def create_order(order_in: OrderIn):
    id_product_str = str(order_in.id_product)
    query = orders.insert().values(
        id_user=order_in.id_user,
        id_product=id_product_str,
        date=order_in.date,
        status=order_in.status
    )
    order_id = await database.execute(query)
    return {**order_in.dict(), "id": order_id}

@app.put("/orders/{order_id}", response_model=Order)
async def update_order(order_id: int, new_order: OrderIn):
    query = orders.update().where(orders.c.id == order_id).values(
        id_user=new_order.id_user,
        id_product=str(new_order.id_product),
        date=new_order.date,
        status=new_order.status
    )
    await database.execute(query)
    return {**new_order.dict(), "id": order_id}

@app.delete("/orders/{orders_id}")
async def delete_order(order_id: int):
    query = orders.delete().where(orders.c.id == order_id)
    await database.execute(query)
    return {'message': 'Orders deleted'}

# –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ uvicorn HW6.hw1_6:app --reload